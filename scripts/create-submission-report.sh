#!/bin/bash
# Parse command line arguments

while getopts "mh" opt; do
    case $opt in
        m)
            DOCX=false
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        h)
            echo "Usage: $0 [-a action] [-o output_file]"
            echo "  -m    Create the markdown report only"
            echo "  -h    Display this help message"
            exit 0
            ;;
    esac
done

# Default values
DOCX=${DOCX:-true}
FINAL_REPORT=${FINAL_REPORT:-submission-report.md}
FINAL_REPORT_OUTPUT=${FINAL_REPORT_OUTPUT:-submission-report.docx}

# Determine script and root directory paths robustly
SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]:-$0}" )" &> /dev/null && pwd -P )"
ROOT_DIR="$(dirname "${SCRIPT_DIR}")"
echo "Project root: ${ROOT_DIR}"

pushd "$ROOT_DIR" > /dev/null || exit 1

# Clean previous builds and reports
rm -f $FINAL_REPORT
rm -f $FINAL_REPORT_OUTPUT
make clean 2>&1 > /dev/null

# Generate timestamp and machine info
TIMESTAMP_START=$(date +"%m/%d/%Y at %H:%M:%S")
MACHINE=$(uname -a)
echo "Generating submission report ..."

echo -e "# Submission Report\n" >> $FINAL_REPORT
echo -e "- Submission generated at $TIMESTAMP_START\n" >> $FINAL_REPORT
echo -e "- Machine info: $MACHINE\n" >> $FINAL_REPORT
echo -e "## Note to Students\n" >> $FINAL_REPORT
echo -e "Please read this report carefully before submission." >> $FINAL_REPORT
echo -e "Ensure that all sections are complete and accurate." >> $FINAL_REPORT
echo -e "Look for any errors in the build or test outputs." >> $FINAL_REPORT
echo -e "If you find any issues, correct them before submitting." >> $FINAL_REPORT
echo -e "Post any questions on the class discussion board for help.\n" >> $FINAL_REPORT
echo -e "\n---\n" >> $FINAL_REPORT


# Append the README file if it exists
if [ -f "README.md" ]; then
    echo -e "## README\n" >> $FINAL_REPORT
    cat "README.md" >> $FINAL_REPORT
    echo -e "\n---\n" >> $FINAL_REPORT
fi

# Use a here document to write the initial content of the report
cat <<EOF >> $FINAL_REPORT

## Build Output

This section was generated by running \`make all\` in the project root directory.

\`\`\`bash
$(make all 2>&1)
\`\`\`

---

## Coverage Report

This section was generated by running \`make report\` in the project root directory.

\`\`\`bash
$(make report 2>&1)
\`\`\`

---

## Address Sanitizer Report

This section was generated by running \`make leak-test\` in the project root directory.

\`\`\`bash
$(make leak-test 2>&1)
\`\`\`

---

EOF


SKIP_FILES=("create-submission-report.sh")
# Append the contents of src/, tests/, and scripts/ directories to the report
for dir in src tests scripts; do
    if [ -d "$dir" ]; then
        echo "## $(tr '[:lower:]' '[:upper:]' <<< ${dir:0:1})${dir:1} Files" >> $FINAL_REPORT
        for file in "$dir"/*; do
            # Skip files in the skip list
            if [[ " ${SKIP_FILES[@]} " =~ " $(basename "$file") " ]]; then
                continue
            fi
            if [[ "$file" == *.c || "$file" == *.h || "$file" == *.sh ]]; then
                echo -e "### $(basename "$file")\n" >> $FINAL_REPORT
                echo -e '```c\n' >> $FINAL_REPORT
                cat "$file" >> $FINAL_REPORT
                echo "" >> $FINAL_REPORT
                echo -e '```\n' >> $FINAL_REPORT
            fi
        done
    fi
done


TIMESTAMP_END=$(date +"%m/%d/%Y at %H:%M:%S")
echo -e "Report generated on $TIMESTAMP_END\n" >> $FINAL_REPORT
echo -e "\n---\n" >> $FINAL_REPORT
echo "## End of Report" >> $FINAL_REPORT

# Hash the final report for integrity verification
if command -v shasum &> /dev/null; then
    HASH=$(shasum -a 256 "$FINAL_REPORT" | awk '{print $1}')
    echo -e "\nSHA-256 Hash of the report: $HASH\n" >> $FINAL_REPORT
    echo -e "Do not edit the generated report. Any changes will be reported as academic dishonesty\n" >> $FINAL_REPORT
elif command -v sha256sum &> /dev/null; then
    HASH=$(sha256sum "$FINAL_REPORT" | awk '{print $1}')
    echo -e "\nSHA-256 Hash of the report: $HASH\n" >> $FINAL_REPORT
    echo -e "Do not edit the generated report. Any changes will be reported as academic dishonesty\n" >> $FINAL_REPORT
else
    echo -e "Warning: Neither shasum nor sha256sum is available. Skipping hash generation." >> $FINAL_REPORT
    echo -e "Contact your instructor to report this issue.\n" >> $FINAL_REPORT
fi


if [ "$DOCX" = true ]; then
    echo "Converting to DOCX format ..."
    pandoc -s $FINAL_REPORT -o $FINAL_REPORT_OUTPUT
    echo "Created DOCX report at $FINAL_REPORT_OUTPUT"
else
    echo "Created markdown report at $FINAL_REPORT"
fi
popd > /dev/null || exit 1
echo "Done."